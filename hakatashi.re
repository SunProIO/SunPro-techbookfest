= インターネットの1秒がもし1年だったら(仮)

//raw[|latex|\\chapterauthor{hakatashi・Mine}]

//lead{

//}

== はじめに

たぶんはじめまして。博多市(@hakatashi)です。
今回は技術書典向けの小企画として、
「インターネットの1秒がもし1年だったら」という
出落ち極まりない記事を書こうと思います。

インターネットというのは光の速さを身をもって感じることができるメディアです。
先日PHPのパッケージマネージャーであるcomposerを高速化するという内容のスライド@<fn>{composer}を
拝見したのですが、そこではcomposerが遅い原因として「光の速さが遅すぎる」というものが挙げられていました。

ユニークな考え方ですが言われてればたしかに道理で、日本からアメリカのサーバーまでハンドシェイクで
何度も往復していると、確かに光といえど100ミリ秒単位で時間を浪費しています。
サーバーが近ければ通信は早いというのは誰もが知っていることですが、
光の速度のせいだと言われるとなにやら圧倒されるものがあります。

この記事では、そんなネットワークの微視的な時間スケールについて徹底的に解剖します。
一回の通信を解析し、それぞれ時系列順に細かく分解し、それぞれの操作でどれくらいの時間が費やされ、
どんなイベントがいつ発生するのかを逐一追っていきたいと思います。

とはいえ、ネットワーク通信におけるタイムスパンはミリ秒単位で数えられます。
今回は、そんな微細な時間の移り変わりをなるべくわかりやすくするため、
@<strong>{通信上の1秒という時間を1年にまで引き伸ばし}、@<strong>{約3000万倍}の時間スケールで
ネットワークのイベントを追跡してみます。

//footnote[composer][@<href>{http://www.slideshare.net/hinakano/composer-phpstudy}]

=== 対象読者

 * ほげ
 * ほげ

=== 共著者について

=== シチュエーション

では、実際にどんな通信を解析するとよいでしょう。
徹底解剖する通信として、なるべく我々が普段慣れ親しんでいて、
それでいてそれなりに複雑で解剖しごたえのある通信を採用したいところです。

そこで、今回は@<strong>{HTTPSプロトコル}の通信をメインに解析しました。
ふだん我々がブラウザから毎日使っているプロトコルなのは言うまでもなく、
SSL/TLSの処理を挟むので、それなりに面白い結果になるのではないでしょうか。

また、HTTPS通信を行う際に必要となるARPやDNS通信についても述べていきます。

さらに、通信を行うサーバーとクライアントの場所ですが、
今回の技術書典の会場でもある東京のインターネット環境から、
さくらインターネットが誇る、石狩データセンターまで通信を行います。

Googleマップによると、東京から、石狩データセンターがある石狩市新港中央までは1177.3km。
光ファイバーに用いられる石英ガラスの屈折率は1.50程度@<fn>{silicon}なので、光は約20万km/sでこの距離を移動します。
つまり、東京から石狩までの物理的な片道時間は約5.9ミリ秒となります。
瞬く間もないほどの時間ですが、時間スケールを1年に引き伸ばすと2日と3時間半もかかります。
往復で4日と7時間。石狩までぶらり旅といった感じですね。

//footnote[silicon][光学ガラス材料 - シグマ光機株式会社 @<href>{http://www.products-sigmakoki.com/category/opt_d/opt_d01.html}]

==== 1秒→1年

1秒が1年になった世界の様子をもう少し見てみましょう。

真空中の光は時速34kmで移動します。
先ほど出てきた光ファイバー中の光速は時速23km程度になるので、
自転車か、休憩しながらのドライブ旅程度の速さになります。
ちなみに男子マラソンの世界記録は時速20.6kmです。@<fn>{marathon}@<fn>{relativity}

3GHzのCPUは、こんな世界でも1秒間に95回という高橋名人の6倍のクロックを刻みます。
PC3-12800のメモリーの最大転送速度は、
もはやダイアルアップ接続よりも遥かにナローバンドですが、
1秒間に3200ビットの情報を読み出すことができます。

//footnote[marathon][2014年ベルリンマラソンのデニス・キメット選手の記録、2時間2分57秒より。]
//footnote[relativity][ただし、この速度で走行するとこの世界では体重が26%増えるのでオススメしない。]

==== 制約など

今回パケットを解析する上で、話を簡便化するためにいくつかの制約を加えています。

 * DNSのシステムを明確に示すため、ローカルホストにDNSサーバーを置き、
   そこからリクエストのたびにルートDNSサーバーからアドレスを引いています。
 * 時間がかかりすぎるため、DNSSECの検証は省略しています。
 * SSL/TLSの証明書検証は省略しています。

=== 測定環境

測定には、ラップトップマシン上のUbuntuの仮想環境を使用しました。
一回の測定ごとにDNSキャッシュとARPキャッシュをクリアし、
なるべくクリーンな状態で測定を行いました。

また、先程も述べたとおりDNSサーバーはローカルホストに設置し、
そこから外部に向けてアドレスを引くようにしました。

...

== ルーターのARP解決

=== 1月1日 午前0時0分 ARPリクエスト送信

あけましておめでとうございます。NHKの「ゆく年くる年」を見ながらインターネットの年が明けます。

この瞬間、東京でまったりと紅白歌合戦を見ていたクライアントちゃんは、
石狩にいるサーバーちゃんに聞きたいことがあるのを思い出しました。
長い長い通信の始まりです。

さっそくクライアントちゃんはサーバーちゃんに手紙を書くことにしました。

クライアントちゃんは何もわかりません。
郵便ポスト(ルーター)の場所も、サーバーちゃんの住所(IPアドレス)も、
いつも使っていた住所録(DNSサーバー)の場所も覚えていません。
キャッシュを削除したクライアントちゃんは記憶を失ってしまったのです。

覚えているのは、ただ石狩にいるはずのサーバーちゃんのことだけ……。

困ったクライアントちゃんは、まずは郵便ポスト(ルーター)を探すことにしました。
家の中や近所のことならともかく、遠く石狩に住むサーバーちゃんに手紙を届けるには、
何よりポストがなければ話が始まりません。

クライアントちゃんはもうネットワークに接続しているので、
ルーターのIPアドレスはすでに分かっています。
しかし実際にルーターと通信するには、ルーターのMACアドレスが必要です。
これを引くために、@<kw>{ARP, Address Resolution Protocol}と呼ばれる
プロトコルを用います。

ARPリクエストはIPアドレスに対応するMACアドレスを検索するリクエストです。
MACアドレスの@<kw>{プロードキャストアドレス}(FF:FF:FF:FF:FF:FF)に向けて発信することで、
同一ネットワーク内のすべての機器にこのリクエストを送信することができます。

クライアントちゃんは街中に響く声でポストの場所を尋ねました。

=== 1月1日 午前3時26分 ARPレスポンス受信

いったい今何時だと思っているんでしょうか。
クライアントちゃんの声は街中に響き渡り、近隣住民から大目玉を食らいましたが、
努力の甲斐あって3時間半後に親切な人がポストの場所を教えてくれました。

ARPは、ブロードキャストでネットワーク全体に配信されたイーサネットフレームに対して、
尋ねられているIPアドレスが自分であればMACアドレスを応答するという
シンプルな仕組みで動作します。

今回は事前にARPキャッシュを削除してから通信を行ったので、
通信前にARPの問い合わせが必ず行われるのですが、
そもそもARPは頻繁にキャッシュを消去されます。
クライアントちゃんは忘れっぽいのです。

== DNS解決

== TCP接続ハンドシェイク

== TLSネゴシエーション

== HTTPリクエストとレスポンス

== TLS終了アラート

== TCPコネクション切断

== 最後に

これは文章でした。
